package org.mongodb.meclipse;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.jface.wizard.IWizard;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.ui.wizards.IWizardDescriptor;
import org.mongodb.meclipse.preferences.MongoInstance;
import org.mongodb.meclipse.views.FilterPlacement;
import org.mongodb.meclipse.views.MeclipseView;
import org.mongodb.meclipse.views.objects.Filter;
import org.osgi.framework.Bundle;
import org.osgi.framework.BundleContext;

/**
 * The activator class controls the plug-in life cycle
 * @author Flavio [FlaPer87] Percoco Premoli, walknwind
 */
public class MeclipsePlugin extends AbstractUIPlugin {

	// The plug-in ID
	public static final String PLUGIN_ID = "org.mongodb.meclipse";
	
	private HashMap<String, MongoInstance> mongoInstances = new HashMap<String, MongoInstance>();
	private HashMap<FilterPlacement, Set<Filter>> filters = new HashMap<FilterPlacement, Set<Filter>>();
	private MeclipseView mongoDbView;
	
	public void setMongoDbView(MeclipseView mongoDbView)
	{
		this.mongoDbView = mongoDbView;
	}
	
	public MeclipseView getMongoDbView()
	{
		return mongoDbView;
	}

	// The shared instance
	private static MeclipsePlugin plugin;
	
	/**
	 * The constructor
	 */
	public MeclipsePlugin() {
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
		MongoInstance[] savedServers = loadSavedServers();
		for (MongoInstance savedServer : savedServers)
		{
			mongoInstances.put(savedServer.getName(), savedServer);
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#stop(org.osgi.framework.BundleContext)
	 */
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		saveServers();
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @return the shared instance
	 */
	public static MeclipsePlugin getDefault() {
		return plugin;
	}
	
	/**
	 * Taken from EclipseTracPlugin
	 * 
     * Returns an image descriptor for the image file at the given plug-in
     * relative path
     * 
     * @param path
     *            the path
     * @return the image descriptor
     */
    protected static ImageDescriptor getImageDescriptor( String path )
    {
        return imageDescriptorFromPlugin( PLUGIN_ID, path );
    }
    
	// IMAGE HANDLING
	public static final String COLLECTION_IMG_ID =	"./icons/table.png";
	public static final String CONNECTION_IMG_ID =	"./icons/leaf.png";
	public static final String DATABASE_IMG_ID =	"./icons/database.png";
	public static final String FILTER_IMG_ID =		"./icons/table_go.png";
	
	final List<String> IMG_ID_LIST =
		new ArrayList<String> ()
		{
			/**
			 * Generated by Eclipse
			 */
			private static final long serialVersionUID = 666142153396600669L;

			{
				add (COLLECTION_IMG_ID);
				add (CONNECTION_IMG_ID);
				add (DATABASE_IMG_ID);
				add (FILTER_IMG_ID);
			}
		};
		
		@Override
		protected void initializeImageRegistry(ImageRegistry registry)
		{
			super.initializeImageRegistry(registry);
			Bundle bundle = Platform.getBundle(PLUGIN_ID);
			for (String img_id : IMG_ID_LIST)
			{
				ImageDescriptor myImage = ImageDescriptor.createFromURL(
						FileLocator.find(bundle, new Path(img_id), null));
				registry.put(img_id, myImage);
			}
		}

		public void addMongo(String name, MongoInstance conn) {
			this.mongoInstances.put(name, conn);
		}
		
		public MongoInstance getMongoInstance(String name)
		{
			return mongoInstances.get(name);
		}

		public Set<String> getMongoNames() {
			return mongoInstances.keySet();
		}
		
		public void addFilter(FilterPlacement placement, Filter filter)
		{
			Set<Filter> filtersThere = filters.get(placement);

			if (filtersThere == null)
				filtersThere = new HashSet<Filter>();
			filtersThere.add(filter);
			
			filters.put(placement, filtersThere);
			getMongoDbView().refreshMe();
		}
		
		private MongoInstance[] loadSavedServers() {
			FileInputStream inputStream = null;
			try {
				IPath libPath = MeclipsePlugin.getDefault().getStateLocation();
				libPath = libPath.append("servers.cfg");
				File file = libPath.toFile();
				if (!file.exists())
					return new MongoInstance[0];
				
				inputStream = new FileInputStream(file);
				DataInputStream dataInputStream = new DataInputStream(inputStream);
				BufferedReader bReader = new BufferedReader(new InputStreamReader(dataInputStream));
				
				java.util.List<MongoInstance> savedServersList = new ArrayList<MongoInstance>();
				String line;
				while ((line = bReader.readLine()) != null)
				{
					// TODO: use CsvWriter
					String[] values = line.split(",");
					MongoInstance server = new MongoInstance(values[0]);
					server.setHost(values[1]);
					try
					{
						server.setPort(Integer.valueOf(values[2]));
					}
					catch (NumberFormatException ex)
					{
						System.out.println(ex);
					}
					savedServersList.add(server);
				}
				return savedServersList.toArray(new MongoInstance[savedServersList.size()]);
			}
			catch(IOException ex)
			{
				ex.printStackTrace();
			}
			return new MongoInstance[0];
		}
		
	private void saveServers()
	{
		// save server preferences here
		FileWriter writer = null;
		try {
			IPath libPath = getStateLocation();
			libPath = libPath.append("servers.cfg");
			File file = libPath.toFile();
			if (!file.exists())
				file.createNewFile();
			writer = new FileWriter(file, false); // overwrite all servers
			for (MongoInstance server : mongoInstances.values())
			{
				writer.write(server.getName() + "," + server.getHost() + "," + server.getPort() + "\n");
			}
		
		}
		/*
		catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		catch(IOException ex)
		{
			ex.printStackTrace();
		}
		finally
		{
			if (writer != null)
			{
				try
				{
					writer.close();
				}
				catch (IOException e1)
				{
					e1.printStackTrace();
				}
			}
		}// end finally
	}

	public void removeMongo(String name) {
		mongoInstances.remove(name);
	}
	
	public void markMongoDeleted(String name)
	{
		mongoInstances.get(name).setIsDeleted(true);		
	}
	
	/**
	 * Stolen from http://torkildr.blogspot.com/2010/07/invoking-eclipse-wizard.html
	 * @param id
	 */
	public void openWizard(String id) {
		 // First see if this is a "new wizard".
		 IWizardDescriptor descriptor = PlatformUI.getWorkbench()
		   .getNewWizardRegistry().findWizard(id);
		 // If not check if it is an "import wizard".
		 if  (descriptor == null) {
		   descriptor = PlatformUI.getWorkbench().getImportWizardRegistry()
		   .findWizard(id);
		 }
		 // Or maybe an export wizard
		 if  (descriptor == null) {
		   descriptor = PlatformUI.getWorkbench().getExportWizardRegistry()
		   .findWizard(id);
		 }
		 try  {
		   // Then if we have a wizard, open it.
		   if  (descriptor != null) {
		     IWizard wizard = descriptor.createWizard();
		     WizardDialog wd = new  WizardDialog(PlatformUI.getWorkbench().getDisplay()
		       .getActiveShell(), wizard);
		     wd.setTitle(wizard.getWindowTitle());
		     wd.open();
		   }
		 } catch  (CoreException e) {
		   e.printStackTrace();
		 }
		}

	public Set<Filter> getFilters(FilterPlacement filterPlacement) {
		return filters.get(filterPlacement);
	}
}
